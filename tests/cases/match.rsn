match: {
    src: r#"match 1 {
        0 => nonsense,
        1 => true,
    }"#,
    output: Bool(true),
}

match_any: {
    src: r#"match 1 {
        _ => true,
        1 => false,
    }"#,
    output: Bool(true),
}

match_two: {
    src: r#"match [1, 2] {
        [1, 0] => nonsense,
        [0, 2] => nonsense,
        [1, 2] => true,
    }"#,
    output: Bool(true),
}

match_two_any: {
    src: r#"match [1, 2] {
        [_, _] => true,
        [1, 2] => false,
    }"#,
    output: Bool(true),
}

match_two_any_one: {
    src: r#"match [1, 2] {
        _ => true,
        [1, 2] => false,
    }"#,
    output: Bool(true),
}

match_regex: {
    src: r#"match "hello" {
        \HELLO/ => false,
        \HELLO/i => true,
    }"#,
    output: Bool(true),
}

match_tuple: {
    src: r#"match [1, 2] {
        "hi" => false,
        [1,] => false,
        [1,2,3] => false,
        [1, a] => a,
    }"#,
    output: Int(2),
}

mismatch: {
    src: r#"match true {
        false => 0,
    }"#,
    output: Fault(Exception(Exception { value: Symbol("mismatch"), backtrace: [SourceRange { source_id: SourceId(None), start: 21, length: 10 }] })),
}

try_mismatch: {
    src: r#"match true {
        false => 0,
    }?"#,
    output: Nil,
}

let_irrefutable: {
    src: r#"let foo = 1 else { return }"#,
    output: Error([Ranged(ElseOnIrrefutablePattern, SourceRange { source_id: SourceId(None), start: 17, length: 10 })]),
}

let_else_doesnt_diverge: {
    src: r#"let 1 = true else { true }"#,
    output: Error([Ranged(LetElseMustDiverge, SourceRange { source_id: SourceId(None), start: 20, length: 4 })]),
}

map_tuple_destructure: {
    src: r#"let [["a", 1]] = {"a": 1}"#,
    output: Bool(true),
}

tuple_mismatch: {
    src: r#"let [a, 1] = 1"#,
    output: Fault(
        Exception(
            Exception {
                value: Symbol("mismatch"),
                backtrace: [
                    SourceRange { source_id: SourceId(None), start: 0, length: 14 }
                ]
            }
        )
    ),
}

list_match: {
    src: r#"let ["a", a] = ["a", 1]; a"#,
    output: Int(1),
}

map_match: {
    src: r#"let {"a": a} = {"a": 1}; a"#,
    output: Int(1),
}

map_mismatch: {
    src: r#"let {"a": a} = {"b": 1}; a"#,
    output: Fault(Exception(Exception { value: Symbol("mismatch"), backtrace: [SourceRange { source_id: SourceId(None), start: 0, length: 23 }] })),
}

tuple_remaining: {
    src: r#"match [1, 2, 3, 4] {
        [1, 2] => false,
        [1, ...] => true,
    }"#,
    output: Bool(true),
}

match_problem: {
    src: r#"
    match [1, 2] {
        [1, 2] => true,
    };

    let a = [1, 2];
    match a {
        [1, 2] => true,
    }
    "#,
    output: Bool(true),
}